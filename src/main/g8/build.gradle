apply plugin: "java"
apply plugin: "checkstyle"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "application"

version = "$version$"
group = "$group$"

// Use Java 7 by default
sourceCompatibility = '1.7'
targetCompatibility = '1.7'

tasks.withType(Compile) {
    options.encoding = 'UTF-8'
}

mainClassName="$group$.helloworld.HelloWorldApplication"

// additional source code dirs for acceptance-tests and integration-tests 
def acceptanceSourceDir = 'src/acceptance-test/java'
def acceptanceResourceDir = 'src/acceptance-test/resources'

def integrationTestSourceDir = 'src/integration-test/java'
def integrationTestResourceDir = 'src/integration-test/resources'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral() // maven { url 'http://jcenter.bintray.com' }
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}


project.ext{
    testAll = project.hasProperty('testAll') && ['on', 'true'].contains(project.properties.testAll)
    if(testAll) {
        useIntegrationTests = true
        useCodeCoverage = true
        useFindbugs = true
    }
    else {
        useIntegrationTests = project.hasProperty('integrationTest') && ['on', 'true'].contains(project.properties.integrationTest)
        useCodeCoverage = project.hasProperty('coverage') && ['on', 'true'].contains(project.properties.coverage)
        useFindbugs = project.hasProperty('findbugs') && ['on', 'true'].contains(project.properties.findbugs) && !(project.hasProperty('ignoreFindbugs'))
    }
}


def gradleWrapperVersion = "$gradle_version$"
task wrapper(type: Wrapper) { gradleVersion = gradleWrapperVersion }

// remove junit from compile config. We don't want junit in our fatJar...
configurations { compile.exclude module: 'junit' }

// repo
repositories {
    mavenCentral()
}

// some global library versions for our dependencies
project.ext.libraryVersions = [
                junit: '4.10',
                mockito: '1.9.5',
                logback: '1.1.2',
                hamcrest: '1.3',
                cobertura: '2.0.3',
                slf4j: '1.7.7',
                dw: '0.7.0',
            ]



dependencies{    
    compile 'io.dropwizard:dropwizard-core:' + libraryVersions.dw
    compile 'io.dropwizard:dropwizard-auth:' + libraryVersions.dw
    compile 'io.dropwizard:dropwizard-assets:' + libraryVersions.dw
    compile 'io.dropwizard:dropwizard-spdy:' + libraryVersions.dw
    compile 'io.dropwizard:dropwizard-hibernate:' + libraryVersions.dw
    compile 'io.dropwizard:dropwizard-views-freemarker:' + libraryVersions.dw
    compile 'io.dropwizard:dropwizard-views-mustache:' + libraryVersions.dw
    compile 'io.dropwizard:dropwizard-migrations:' + libraryVersions.dw
    compile 'org.hsqldb:hsqldb:2.3.2'
    compile 'org.slf4j:slf4j-api:' + libraryVersions.slf4j
    
    testCompile 'io.dropwizard:dropwizard-testing:' + libraryVersions.dw
    testCompile 'junit:junit:' + libraryVersions.junit
    testCompile 'org.hamcrest:hamcrest-library:' + libraryVersions.hamcrest
    testCompile "org.mockito:mockito-core:" + libraryVersions.mockito
    testCompile "info.cukes:cucumber-java:1.1.6"
    testCompile "info.cukes:cucumber-junit:1.1.6"
}

task fatJar(type: Jar) {
    dependsOn configurations.runtime 
    from sourceSets.main.output
    from (configurations.runtime.resolve().collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
    
    manifest {
        attributes("Main-Class": "\$mainClassName" )
    }
    
    classifier = 'fatJar'
}

configurations {
        integrationTestCompile { extendsFrom testCompile }
        integrationTestRuntime { extendsFrom integrationTestCompile, testRuntime }

        acceptanceTestCompile { extendsFrom testCompile }
        acceptanceTestRuntime { extendsFrom acceptanceTestCompile, testRuntime }
    }
    sourceSets {
        integrationTest {
            java.srcDir file(integrationTestSourceDir)
            resources.srcDir file(integrationTestResourceDir)
            compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.integrationTestCompile
            runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
        }

        acceptanceTest {
            java.srcDir file(acceptanceSourceDir)
            resources.srcDir file(acceptanceResourceDir)
            compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.acceptanceTestCompile
            runtimeClasspath = output + compileClasspath + configurations.acceptanceTestRuntime
        }
    }


test {
    if (project.ext.useCodeCoverage) {
        apply from: "\${projectDir}/gradle/check.gradle"
    }


    if (project.ext.useIntegrationTests) {

        sourceSets.test.java.srcDirs += integrationTestSourceDir
        sourceSets.test.resources.srcDirs += integrationTestResourceDir
    }

    // only apply acceptance task when features are available
    if(new File("\${projectDir}/src/acceptance-test/resources").exists()){
        apply from: "\${projectDir}/gradle/cucumber.gradle"
    }


    //listening to test execution events
    beforeTest { descriptor ->
        logger.lifecycle("\t\t" + descriptor.getName())
    }
    afterTest { descriptor, result ->
        if (result.failedTestCount > 0) {
            logger.lifecycle("â˜¹ " * 40)
        }
    }
    beforeSuite { descriptor ->
        logger.lifecycle("Suite " + descriptor)
        if (descriptor.getClassName() != null)
            logger.lifecycle("\tClass " + descriptor.getClassName() + " {")

    }
    afterSuite { descriptor ->
        if (descriptor.getClassName() != null) {
            logger.lifecycle("\t}")
        }

    }
    testLogging.showStandardStreams = true
    //maxHeapSize "1g"
    //jvmArgs '-server', '-Xmx1g', '-XX:MaxPermSize=256m'
}

// Configure the run task to start the Dropwizard service
run {
    args 'server', './example.yml'
}

task(runDebug, dependsOn: 'classes', type: JavaExec) {
    main = "\$mainClassName"
    args 'server', './example.yml'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"]
}

artifacts {
    archives fatJar
}


