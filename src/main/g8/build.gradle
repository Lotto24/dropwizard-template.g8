apply plugin: "java"
apply plugin: "checkstyle"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "application"
apply plugin: 'gradle-one-jar'

version = "$version$"
group = "$group$"
mainClassName="$group$.helloworld.HelloWorldApplication"

// additional source code dirs for acceptance-tests and integration-tests 
def acceptanceSourceDir = 'src/acceptance-test/java'
def acceptanceResourceDir = 'src/acceptance-test/resources'

def integrationTestSourceDir = 'src/integration-test/java'
def integrationTestResourceDir = 'src/integration-test/resources'


// Add Gradle OneJar Plugin, see https://github.com/rholder/gradle-one-jar
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.3'
    }
}

project.ext{
    createFatJar = project.hasProperty('createFatJar') && ['on', 'true'].contains(project.properties.createFatJar)
    testAll = project.hasProperty('testAll') && ['on', 'true'].contains(project.properties.testAll)
    if(testAll) {
        useIntegrationTests = true
        useCodeCoverage = true
        useFindbugs = true
    }
    else {
        useIntegrationTests = project.hasProperty('integrationTest') && ['on', 'true'].contains(project.properties.integrationTest)
        useCodeCoverage = project.hasProperty('coverage') && ['on', 'true'].contains(project.properties.coverage)
        useFindbugs = project.hasProperty('findbugs') && ['on', 'true'].contains(project.properties.findbugs) && !(project.hasProperty('ignoreFindbugs'))
    }
}

if(project.ext.useFindbugs)
    apply plugin: 'findbugs'

def gradleWrapperVersion = "$gradle_version$"
task wrapper(type: Wrapper) { gradleVersion = gradleWrapperVersion }

// remove junit from compile config. We don't want junit in our fatJar...
configurations { compile.exclude module: 'junit' }

// repo
repositories {
    mavenCentral()
}

// some global library versions for our dependencies
project.ext.libraryVersions = [
                junit: '4.10', 
                mockito: '1.9.0', 
                logback: '1.0.7',
                hamcrest: '1.3.RC2',
                cobertura: '1.9.3',
                slf4j: '1.6.6',
                dw: '0.6.2',
            ]



dependencies{    
    compile 'com.yammer.dropwizard:dropwizard-core:' + libraryVersions.dw
    compile 'com.yammer.dropwizard:dropwizard-auth:' + libraryVersions.dw
    compile 'com.yammer.dropwizard:dropwizard-hibernate:' + libraryVersions.dw
    compile 'com.yammer.dropwizard:dropwizard-migrations:' + libraryVersions.dw
    compile 'org.hsqldb:hsqldb:2.2.9'
    
    testCompile 'com.yammer.dropwizard:dropwizard-testing:' + libraryVersions.dw
    testCompile 'junit:junit-dep:' + libraryVersions.junit
    testCompile 'org.hamcrest:hamcrest-library:' + libraryVersions.hamcrest
    testCompile "org.mockito:mockito-core:" + libraryVersions.mockito
    testCompile "info.cukes:cucumber-java:1.1.3"
    testCompile "info.cukes:cucumber-junit:1.1.3"
}


jar {
    dependsOn configurations.runtime
    if (project.ext.createFatJar){
        from (configurations.runtime.resolve().collect { it.isDirectory() ? it : zipTree(it) }) {
            exclude 'META-INF/MANIFEST.MF'
            exclude 'META-INF/*.SF'
            exclude 'META-INF/*.DSA'
            exclude 'META-INF/*.RSA'
        }
    }
    manifest {
        attributes("Main-Class": "\$mainClassName" )
    }
}

configurations {
        integrationTestCompile { extendsFrom testCompile }
        integrationTestRuntime { extendsFrom integrationTestCompile, testRuntime }

        acceptanceTestCompile { extendsFrom testCompile }
        acceptanceTestRuntime { extendsFrom acceptanceTestCompile, testRuntime }
    }
    sourceSets {
        integrationTest {
            java.srcDir file(integrationTestSourceDir)
            resources.srcDir file(integrationTestResourceDir)
            compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.integrationTestCompile
            runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
        }

        acceptanceTest {
            java.srcDir file(acceptanceSourceDir)
            resources.srcDir file(acceptanceResourceDir)
            compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.acceptanceTestCompile
            runtimeClasspath = output + compileClasspath + configurations.acceptanceTestRuntime
        }
    }


test {
    if (project.ext.useCodeCoverage) {
        apply from: "\${projectDir}/cobertura.gradle"
    }


    if (project.ext.useIntegrationTests) {

        sourceSets.test.java.srcDirs += integrationTestSourceDir
        sourceSets.test.resources.srcDirs += integrationTestResourceDir
    }

    // only apply acceptance task when features are available
    if(new File("\${projectDir}/src/acceptance-test/resources").exists()){
        apply from: "\${projectDir}/cucumber.gradle"
    }


    //listening to test execution events
    beforeTest { descriptor ->
        logger.lifecycle("\t\t" + descriptor.getName())
    }
    afterTest { descriptor, result ->
        if (result.failedTestCount > 0) {
            logger.lifecycle("â˜¹ " * 40)
        }
    }
    beforeSuite { descriptor ->
        logger.lifecycle("Suite " + descriptor)
        if (descriptor.getClassName() != null)
            logger.lifecycle("\tClass " + descriptor.getClassName() + " {")

    }
    afterSuite { descriptor ->
        if (descriptor.getClassName() != null) {
            logger.lifecycle("\t}")
        }

    }
    testLogging.showStandardStreams = true
    //maxHeapSize "1g"
    //jvmArgs '-server', '-Xmx1g', '-XX:MaxPermSize=256m'
}

// Configure the oneJar task
task oneJar(type: OneJar) {
    mainClass = mainClassName
}

// Configure the run task to start the Dropwizard service
run {
    args 'server', './example.yml'
}

artifacts {
    oneJar
}

tasks['checkstyleAcceptanceTest'].enabled = false
tasks['checkstyleTest'].enabled = false
tasks['checkstyleIntegrationTest'].enabled = false

